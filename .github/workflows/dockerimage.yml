name: Deploy
on:
  push:
    branches:
      - main
      - develop
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  deploy-prod:
    name: "Build/Deploy PROD"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t timetagger-prod -f deploy/repo.Dockerfile .

      - name: Save Docker Image
        run: |
          docker save timetagger-prod:latest | gzip > image.tar.gz

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/prod.key
          chmod 600 ~/.ssh/prod.key
          cat >>~/.ssh/config <<END
          Host target
              HostName docker01.fra.askei.net
              User sa_deploy_timetagger
              IdentityFile ~/.ssh/prod.key
              StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.DEPLOY_PROD_SSH_PRIVATE_KEY }}

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:timetagger-deploy

      - name: Copy Docker Image to Target
        run: |
          scp image.tar.gz target:~/image.tar.gz

      - name: Cleanup Local Files
        run: |
          rm image.tar.gz

      - name: Load Docker Image on Target
        run: |
          ssh target 'gunzip ~/image.tar.gz'
          ssh target 'docker load -i ~/image.tar'
          ssh target 'rm ~/image.tar'

      - name: Restart Server on Target
        run: ssh target 'cd /opt/stacks/timetagger-prod && docker compose up -d'

  deploy-qa:
    name: "Build/Deploy QA"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t timetagger-qa -f deploy/repo.Dockerfile .

      - name: Save Docker Image
        run: |
          docker save timetagger-qa:latest | gzip > image.tar.gz

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/qa.key
          chmod 600 ~/.ssh/qa.key
          cat >>~/.ssh/config <<END
          Host target
              HostName docker01.fra.askei.net
              User sa_deploy_timetagger
              IdentityFile ~/.ssh/qa.key
              StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.DEPLOY_QA_SSH_PRIVATE_KEY }}

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:timetagger-deploy

      - name: Copy Docker Image to Target
        run: |
          scp image.tar.gz target:~/image.tar.gz

      - name: Cleanup Local Files
        run: |
          rm image.tar.gz

      - name: Load Docker Image on Target
        run: |
          ssh target 'gunzip ~/image.tar.gz'
          ssh target 'docker load -i ~/image.tar'
          ssh target 'rm ~/image.tar'

      - name: Restart Server on Target
        run: ssh target 'cd /opt/stacks/timetagger-qa && docker compose up -d'